# WebRTCビデオ通話アプリ - Cursor ルール

## プロジェクト概要
ReactフロントエンドとNode.jsバックエンドで構築されたWebRTCを利用したビデオ通話アプリケーションです。リアルタイムでの音声・映像通信を実現し、シンプルで使いやすいインターフェースを提供します。

## 開発環境
- **OS**: macOS
- **Docker**: パフォーマンス問題を避けるため使用しない
- **開発効率**: ローカル環境での高速な開発サイクルを重視

## 技術スタック

### フロントエンド
- **フレームワーク**: React 18.x (最新安定版)
- **言語**: TypeScript 5.x (最新安定版)
- **バンドラー**: Vite (高速な開発サーバーとHMR)
- **CSS**: CSS Modules または Styled Components
- **WebRTC**: ブラウザ標準のWebRTC API
- **状態管理**: React Context API + useReducer (軽量なアプリのため)
- **テスト**: Jest + React Testing Library
- **ディレクトリ**: `./frontend/`

### バックエンド
- **ランタイム**: Node.js 20.x LTS (最新LTS版)
- **フレームワーク**: Express.js 4.x (最新安定版)
- **リアルタイム通信**: Socket.io 4.x (WebSocket実装)
- **言語**: TypeScript 5.x (フロントエンドと統一)
- **テスト**: Jest + Supertest
- **ディレクトリ**: `./backend/`

### WebRTC関連技術
- **シグナリング**: Socket.io (WebSocketベース)
- **STUN/TURNサーバー**: Google Public STUN + 将来的にcoturn
- **メディア処理**: ブラウザ標準のMediaStream API
- **セキュリティ**: HTTPS必須 (WebRTCの要件)

### 開発・デプロイ
- **CI/CD**: GitHub Actions
- **パッケージマネージャー**: npm (Node.js標準)
- **プロセス管理**: PM2 (本番環境)
- **リバースプロキシ**: nginx (本番環境)

## 技術選定の背景

### React + TypeScript
- **React**: 豊富なエコシステム、WebRTCとの親和性、リアルタイムUI更新に適している
- **TypeScript**: 型安全性、大規模開発での保守性、WebRTC APIの複雑さを型で管理

### Node.js + Express
- **Node.js**: JavaScriptでフルスタック開発、リアルタイム処理に優れている
- **Express**: シンプルで軽量、豊富なミドルウェア、学習コストが低い

### Socket.io
- **選定理由**: WebSocketの安定した実装、フォールバック機能、部屋機能
- **代替案**: 生のWebSocketも検討したが、接続管理の複雑さを考慮してSocket.ioを選択

### Vite
- **選定理由**: 高速な開発サーバー、TypeScriptサポート、モダンな設定
- **代替案**: Create React Appより高速、Webpackよりシンプルな設定

### バージョン戦略
- **基本方針**: 最新安定版を使用
- **LTS選択**: Node.jsはLTS版（安定性重視）
- **例外**: 特定のライブラリで互換性問題がある場合のみ固定

## ディレクトリ構造
```
/Users/user/Development/webrtc/
├── frontend/         # React アプリケーション
│   ├── src/
│   │   ├── components/   # UIコンポーネント
│   │   ├── hooks/        # カスタムフック
│   │   ├── services/     # WebRTC、Socket.io関連
│   │   ├── types/        # TypeScript型定義
│   │   └── utils/        # ユーティリティ関数
├── backend/          # Node.js サーバー
│   ├── src/
│   │   ├── routes/       # APIルート
│   │   ├── services/     # ビジネスロジック
│   │   ├── socket/       # Socket.ioハンドラー
│   │   ├── types/        # TypeScript型定義
│   │   └── utils/        # ユーティリティ関数
├── shared/           # 共通型定義・ユーティリティ
├── README.md         # プロジェクトドキュメント
└── .cursorrules      # このファイル
```

## 開発ガイドライン

### コード品質・スタイル
- **簡潔さよりも可読性**: WebRTCの複雑さを考慮し、理解しやすいコードを優先
- **型安全性の重視**: WebRTC APIの複雑さをTypeScriptで管理
- **一貫性**: 命名規則とコード構造の統一
- **ドキュメント**: WebRTC特有の処理には詳細なコメントを記載

## Docコメント（JSDoc）ガイドライン

### 基本原則
1. **全ての公開関数・クラス・インターフェースにはDocコメントを必須とする**
2. **WebRTC特有の処理には特に詳細な説明を記載する**
3. **日本語で記述し、技術的な詳細も含める**
4. **型情報だけでなく、ビジネスロジックや制約条件も記述する**

### TypeScript/JavaScript Docコメント標準

#### 関数のDocコメント
```typescript
/**
 * WebRTCピア接続を確立し、シグナリング処理を開始します。
 * 
 * この関数は以下の処理を順次実行します：
 * 1. RTCPeerConnectionインスタンスの作成
 * 2. ICE候補の収集とイベントハンドラーの設定
 * 3. ローカルメディアストリームの追加
 * 4. リモートストリーム受信の準備
 * 
 * @param targetUserId - 接続先ユーザーのID（形式: user-{timestamp}）
 * @param localStream - ローカルメディアストリーム（カメラ・マイク）
 * @param onRemoteStream - リモートストリーム受信時のコールバック関数
 * @param stunServers - STUN/TURNサーバーの設定配列
 * @returns Promise<RTCPeerConnection> 確立されたピア接続インスタンス
 * @throws {WebRTCError} メディアストリーム取得失敗時、またはピア接続失敗時
 * 
 * @example
 * ```typescript
 * const peerConnection = await createWebRTCConnection(
 *   'user-1234567890',
 *   localMediaStream,
 *   (remoteStream) => console.log('リモートストリーム受信:', remoteStream),
 *   [{ urls: 'stun:stun.l.google.com:19302' }]
 * );
 * ```
 * 
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection} RTCPeerConnection API
 * @since 1.0.0
 */
```

#### クラスのDocコメント
```typescript
/**
 * WebRTCシグナリングサーバーのSocket.io接続を管理するサービスクラス。
 * 
 * このクラスは以下の機能を提供します：
 * - Socket.ioクライアントの接続管理
 * - WebRTCシグナリングメッセージの送受信
 * - ルーム参加・退出の処理
 * - チャットメッセージの送受信
 * - 接続状態の監視とエラーハンドリング
 * 
 * シングルトンパターンを採用しており、アプリケーション全体で1つのインスタンスを共有します。
 * 
 * @class SocketService
 * @example
 * ```typescript
 * // サービスの取得とルーム参加
 * const socketService = SocketService.getInstance();
 * await socketService.connect('http://localhost:3001');
 * socketService.joinRoom({ roomId: 'room1', userName: 'ユーザー1' });
 * 
 * // イベント監視
 * socketService.on('user-joined', (user) => {
 *   console.log('新しいユーザーが参加:', user);
 * });
 * ```
 * 
 * @since 1.0.0
 */
```

#### インターフェース・型のDocコメント
```typescript
/**
 * チャットメッセージの完全な情報を表すインターフェース。
 * 
 * WebRTCビデオ通話中のチャット機能で使用されるメッセージデータ構造です。
 * すべてのメッセージはルーム単位で管理され、タイムスタンプとユーザー情報を含みます。
 * 
 * @interface ChatMessage
 * @example
 * ```typescript
 * const message: ChatMessage = {
 *   id: 'msg-1234567890',
 *   roomId: 'room1',
 *   userId: 'user-1234567890',
 *   userName: 'ユーザー1',
 *   message: 'こんにちは！',
 *   timestamp: new Date(),
 *   type: 'text'
 * };
 * ```
 */
interface ChatMessage {
  /** 
   * メッセージの一意識別子。
   * 形式: 'msg-' + タイムスタンプ + ランダム文字列
   */
  id: string;
  
  /** 
   * メッセージが送信されたルームID。
   * 形式: 'room' + 数字 または 自由文字列
   */
  roomId: string;
  
  /** 
   * メッセージ送信者のユーザーID。
   * 形式: 'user-' + タイムスタンプ
   */
  userId: string;
  
  /** 
   * メッセージ送信者の表示名。
   * 最大50文字、HTMLエスケープ済み
   */
  userName: string;
  
  /** 
   * メッセージ本文。
   * 最大500文字、HTMLエスケープ済み
   */
  message: string;
  
  /** 
   * メッセージ送信日時。
   * サーバー側で生成される UTC タイムスタンプ
   */
  timestamp: Date;
  
  /** 
   * メッセージタイプ。
   * - 'text': 通常のテキストメッセージ
   * - 'system': システム生成メッセージ（ユーザー参加通知など）
   */
  type: 'text' | 'system';
}
```

#### React コンポーネントのDocコメント
```typescript
/**
 * WebRTCビデオ通話中のチャット機能を提供するUIコンポーネント。
 * 
 * このコンポーネントは以下の機能を提供します：
 * - リアルタイムチャットメッセージの表示
 * - 新しいメッセージの入力と送信
 * - 未読メッセージカウントの表示
 * - チャットパネルの開閉切り替え
 * - 自動スクロールとメッセージフォーマット
 * 
 * フローティングデザインを採用し、ビデオ通話画面を妨げることなく使用できます。
 * 
 * @component
 * @param {ChatPanelProps} props - コンポーネントのプロパティ
 * @param {string} props.roomId - 現在のルームID
 * @param {boolean} props.isVisible - チャットパネルの表示状態
 * @param {() => void} props.onToggleVisibility - パネル表示切り替えコールバック
 * 
 * @returns {JSX.Element} チャットパネルまたはフローティングボタン
 * 
 * @example
 * ```tsx
 * <ChatPanel
 *   roomId="room1"
 *   isVisible={isChatVisible}
 *   onToggleVisibility={() => setIsChatVisible(!isChatVisible)}
 * />
 * ```
 * 
 * @since 1.0.0
 */
```

### 必須事項
1. **関数・メソッド**: 目的、パラメータ、戻り値、例外を必ず記述
2. **クラス・インターフェース**: 役割、使用方法、制約条件を記述
3. **React コンポーネント**: props、使用例、レンダリング内容を記述
4. **WebRTC関連**: 処理フロー、制約条件、ブラウザ対応状況を記述
5. **Socket.io関連**: イベント名、データ形式、エラー処理を記述
6. **非同期処理**: Promise/async-awaitの動作、エラーハンドリングを記述

### Docコメント品質基準
1. **完全性**: すべての引数、戻り値、例外が文書化されている
2. **正確性**: コードの実装と一致している
3. **有用性**: 開発者が理解しやすい情報を提供している
4. **保守性**: コード変更時に容易に更新できる
5. **一貫性**: プロジェクト全体で統一されたフォーマット

### 禁止事項
1. 型情報のみを記述したDocコメント（TypeScriptで型は自明なため）
2. 実装と矛盾するDocコメント
3. 曖昧で理解しにくいDocコメント
4. WebRTC特有の処理で技術的詳細を省略すること
5. エラーハンドリングや制約条件の記述漏れ

### 更新ルール
1. **コード変更時**: 関連するDocコメントを同時に更新する
2. **新機能追加時**: 完全なDocコメントを必ず追加する
3. **リファクタリング時**: Docコメントの内容も見直しを行う
4. **レビュー時**: Docコメントの品質も評価対象とする

## Docコメント（JSDoc）ガイドライン

### 基本原則
1. **全ての公開関数・クラス・インターフェースにはDocコメントを必須とする**
2. **WebRTC特有の処理には特に詳細な説明を記載する**
3. **日本語で記述し、技術的な詳細も含める**
4. **型情報だけでなく、ビジネスロジックや制約条件も記述する**

### TypeScript/JavaScript Docコメント標準

#### 関数のDocコメント
```typescript
/**
 * WebRTCピア接続を確立し、シグナリング処理を開始します。
 * 
 * この関数は以下の処理を順次実行します：
 * 1. RTCPeerConnectionインスタンスの作成
 * 2. ICE候補の収集とイベントハンドラーの設定
 * 3. ローカルメディアストリームの追加
 * 4. リモートストリーム受信の準備
 * 
 * @param targetUserId - 接続先ユーザーのID（形式: user-{timestamp}）
 * @param localStream - ローカルメディアストリーム（カメラ・マイク）
 * @param onRemoteStream - リモートストリーム受信時のコールバック関数
 * @param stunServers - STUN/TURNサーバーの設定配列
 * @returns Promise<RTCPeerConnection> 確立されたピア接続インスタンス
 * @throws {WebRTCError} メディアストリーム取得失敗時、またはピア接続失敗時
 * 
 * @example
 * ```typescript
 * const peerConnection = await createWebRTCConnection(
 *   'user-1234567890',
 *   localMediaStream,
 *   (remoteStream) => console.log('リモートストリーム受信:', remoteStream),
 *   [{ urls: 'stun:stun.l.google.com:19302' }]
 * );
 * ```
 * 
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection} RTCPeerConnection API
 * @since 1.0.0
 */
```

#### クラスのDocコメント
```typescript
/**
 * WebRTCシグナリングサーバーのSocket.io接続を管理するサービスクラス。
 * 
 * このクラスは以下の機能を提供します：
 * - Socket.ioクライアントの接続管理
 * - WebRTCシグナリングメッセージの送受信
 * - ルーム参加・退出の処理
 * - チャットメッセージの送受信
 * - 接続状態の監視とエラーハンドリング
 * 
 * シングルトンパターンを採用しており、アプリケーション全体で1つのインスタンスを共有します。
 * 
 * @class SocketService
 * @example
 * ```typescript
 * // サービスの取得とルーム参加
 * const socketService = SocketService.getInstance();
 * await socketService.connect('http://localhost:3001');
 * socketService.joinRoom({ roomId: 'room1', userName: 'ユーザー1' });
 * 
 * // イベント監視
 * socketService.on('user-joined', (user) => {
 *   console.log('新しいユーザーが参加:', user);
 * });
 * ```
 * 
 * @since 1.0.0
 */
```

#### インターフェース・型のDocコメント
```typescript
/**
 * チャットメッセージの完全な情報を表すインターフェース。
 * 
 * WebRTCビデオ通話中のチャット機能で使用されるメッセージデータ構造です。
 * すべてのメッセージはルーム単位で管理され、タイムスタンプとユーザー情報を含みます。
 * 
 * @interface ChatMessage
 * @example
 * ```typescript
 * const message: ChatMessage = {
 *   id: 'msg-1234567890',
 *   roomId: 'room1',
 *   userId: 'user-1234567890',
 *   userName: 'ユーザー1',
 *   message: 'こんにちは！',
 *   timestamp: new Date(),
 *   type: 'text'
 * };
 * ```
 */
interface ChatMessage {
  /** 
   * メッセージの一意識別子。
   * 形式: 'msg-' + タイムスタンプ + ランダム文字列
   */
  id: string;
  
  /** 
   * メッセージが送信されたルームID。
   * 形式: 'room' + 数字 または 自由文字列
   */
  roomId: string;
  
  /** 
   * メッセージ送信者のユーザーID。
   * 形式: 'user-' + タイムスタンプ
   */
  userId: string;
  
  /** 
   * メッセージ送信者の表示名。
   * 最大50文字、HTMLエスケープ済み
   */
  userName: string;
  
  /** 
   * メッセージ本文。
   * 最大500文字、HTMLエスケープ済み
   */
  message: string;
  
  /** 
   * メッセージ送信日時。
   * サーバー側で生成される UTC タイムスタンプ
   */
  timestamp: Date;
  
  /** 
   * メッセージタイプ。
   * - 'text': 通常のテキストメッセージ
   * - 'system': システム生成メッセージ（ユーザー参加通知など）
   */
  type: 'text' | 'system';
}
```

#### React コンポーネントのDocコメント
```typescript
/**
 * WebRTCビデオ通話中のチャット機能を提供するUIコンポーネント。
 * 
 * このコンポーネントは以下の機能を提供します：
 * - リアルタイムチャットメッセージの表示
 * - 新しいメッセージの入力と送信
 * - 未読メッセージカウントの表示
 * - チャットパネルの開閉切り替え
 * - 自動スクロールとメッセージフォーマット
 * 
 * フローティングデザインを採用し、ビデオ通話画面を妨げることなく使用できます。
 * 
 * @component
 * @param {ChatPanelProps} props - コンポーネントのプロパティ
 * @param {string} props.roomId - 現在のルームID
 * @param {boolean} props.isVisible - チャットパネルの表示状態
 * @param {() => void} props.onToggleVisibility - パネル表示切り替えコールバック
 * 
 * @returns {JSX.Element} チャットパネルまたはフローティングボタン
 * 
 * @example
 * ```tsx
 * <ChatPanel
 *   roomId="room1"
 *   isVisible={isChatVisible}
 *   onToggleVisibility={() => setIsChatVisible(!isChatVisible)}
 * />
 * ```
 * 
 * @since 1.0.0
 */
```

### HTML/CSS コメント標準

#### CSS/SCSS コメント
```css
/**
 * ビデオ通話画面のメインレイアウト
 * 
 * グラスモーフィズムデザインを採用し、背景にグラデーション効果を適用。
 * レスポンシブデザインに対応し、デバイスサイズに応じて動的にレイアウトを調整。
 * 
 * ブレークポイント:
 * - モバイル: ~640px (1列)
 * - タブレット: 641px~1024px (2列)
 * - デスクトップ: 1025px~ (3-4列)
 * 
 * 使用技術:
 * - CSS Grid Layout
 * - Flexbox
 * - CSS Custom Properties
 * - Backdrop Filter
 */
.video-call-container {
  /* ... */
}

/**
 * チャットメッセージバブル
 * 
 * 送信者と受信者で異なるスタイルを適用：
 * - 自分のメッセージ: 右寄せ、青色背景
 * - 他人のメッセージ: 左寄せ、グレー背景
 * 
 * アクセシビリティ対応:
 * - 十分なコントラスト比を確保
 * - フォーカス可能要素にはアウトライン設定
 */
.chat-message-bubble {
  /* ... */
}
```

### 必須事項
1. **関数・メソッド**: 目的、パラメータ、戻り値、例外を必ず記述
2. **クラス・インターフェース**: 役割、使用方法、制約条件を記述
3. **React コンポーネント**: props、使用例、レンダリング内容を記述
4. **WebRTC関連**: 処理フロー、制約条件、ブラウザ対応状況を記述
5. **Socket.io関連**: イベント名、データ形式、エラー処理を記述
6. **非同期処理**: Promise/async-awaitの動作、エラーハンドリングを記述

### Docコメント品質基準
1. **完全性**: すべての引数、戻り値、例外が文書化されている
2. **正確性**: コードの実装と一致している
3. **有用性**: 開発者が理解しやすい情報を提供している
4. **保守性**: コード変更時に容易に更新できる
5. **一貫性**: プロジェクト全体で統一されたフォーマット

### 禁止事項
1. 型情報のみを記述したDocコメント（TypeScriptで型は自明なため）
2. 実装と矛盾するDocコメント
3. 曖昧で理解しにくいDocコメント
4. WebRTC特有の処理で技術的詳細を省略すること
5. エラーハンドリングや制約条件の記述漏れ

### 更新ルール
1. **コード変更時**: 関連するDocコメントを同時に更新する
2. **新機能追加時**: 完全なDocコメントを必ず追加する
3. **リファクタリング時**: Docコメントの内容も見直しを行う
4. **レビュー時**: Docコメントの品質も評価対象とする

### WebRTC開発の特別な考慮事項
1. **非同期処理の管理**
   - Promise/async-awaitの適切な使用
   - エラーハンドリングの徹底
   - タイムアウト処理の実装

2. **メディアストリーム管理**
   - リソースの適切な解放
   - デバイス権限の管理
   - メディア状態の監視

3. **シグナリング設計**
   - メッセージタイプの明確な定義
   - 接続状態の管理
   - エラー伝播の仕組み

4. **セキュリティ考慮**
   - HTTPS必須の徹底
   - CORS設定の適切な管理
   - メディアアクセス権限の適切な処理

## WebRTC + Socket.io 開発で実際に遭遇した問題と解決策

### 重要な開発原則
1. **フィールド名の一貫性**: フロントエンドとバックエンド間でメッセージフィールド名を完全に統一する
2. **初期化順序**: Socket.io接続完了後にWebRTCサービスを初期化する
3. **ユーザーID管理**: ルーム参加成功時に必ずcurrentUserIdを設定する
4. **接続重複防止**: WebRTC接続開始を単一の責任で管理する

### 1. Socket.ioとWebRTCの統合問題

#### 問題: Socket.ioインスタンスの重複作成
**症状**: バックエンドでSocket.io接続が認識されない、ログが表示されない
**原因**: index.tsとSocketHandlerで別々にSocket.ioインスタンスを作成
**解決策**:
```typescript
// ❌ 間違った実装（index.ts）
const io = new Server(server, { cors: {...} });
const socketHandler = new SocketHandler(io); // 別のインスタンスを作成

// ✅ 正しい実装（index.ts）
const socketHandler = new SocketHandler(server); // SocketHandler内で一元管理
```

#### 問題: CORS設定の環境変数不一致
**症状**: フロントエンドから接続できない
**原因**: index.tsとSocketHandlerで異なる環境変数名を使用
**解決策**: 環境変数名を統一（`FRONTEND_URL`で統一）

### 2. WebRTCシグナリングメッセージのフィールド名問題

#### 問題: フィールド名の不一致によるユーザー検索失敗
**症状**: `⚠️ ICE候補送信: ユーザー undefined が見つかりません`
**原因**: フロントエンド送信時は`to`/`from`、バックエンド期待値は`toUserId`/`fromUserId`
**解決策**: フィールド名を完全に統一
```typescript
// ✅ 送信時（フロントエンド）
socketService.sendMessage('offer', {
  type: 'offer',
  data: offer,
  toUserId: targetUserId,        // ← 統一
  fromUserId: socketService.getCurrentUserId(),
});

// ✅ 受信時（フロントエンド）
private async handleOffer(data: RTCOfferMessage): Promise<void> {
  const { fromUserId, data: offer } = data;  // ← 統一
  // ...
}

// ✅ バックエンド
private handleOffer(socket: TypedSocket, message: SignalingMessage): void {
  const targetUser = this.findUserById(message.toUserId);  // ← 統一
  // ...
}
```

### 3. ユーザーID管理とルーム参加処理

#### 問題: currentUserIdがnullのためWebRTC接続失敗
**症状**: 自分自身がリモートユーザーリストに含まれる、fromUserIdがnull
**原因**: SocketServiceでroom-joinedイベント受信時にcurrentUserIdを設定していない
**解決策**:
```typescript
// ✅ SocketService.connect()内で追加
this.socket.on(SOCKET_EVENTS.ROOM_JOINED, (response: any) => {
  if (response.user && response.user.id) {
    this.currentUserId = response.user.id;
    console.log(`✅ currentUserId を設定: ${this.currentUserId}`);
  }
});
```

### 4. WebRTC接続の重複開始問題

#### 問題: 同一ユーザーへの重複接続試行
**症状**: 接続が不安定、エラーが頻発
**原因**: WebRTCServiceとVideoCallコンポーネントの両方で接続開始
**解決策**: 接続開始の責任を一元化
```typescript
// ❌ WebRTCService内で自動接続（削除）
socketService.on('user-joined', (user: any) => {
  this.initiateCall(user.id); // ← これを削除
});

// ✅ VideoCallコンポーネントでのみ制御
useEffect(() => {
  tryStartConnections(); // ← ここで一元管理
}, [tryStartConnections]);
```

### 5. デバッグとトラブルシューティングのベストプラクティス

#### ログ出力の標準化
```typescript
// ✅ 推奨ログフォーマット
console.log('🔍 [DEBUG] 状態確認:', { key: value });
console.log('📤 [SEND] メッセージ送信:', eventName, data);
console.log('📥 [RECV] メッセージ受信:', eventName, data);
console.log('✅ [SUCCESS] 処理完了:', operation);
console.log('⚠️ [WARN] 警告:', warning);
console.log('❌ [ERROR] エラー:', error);
```

#### Socket.ioイベントのデバッグ
```typescript
// ✅ 全イベント監視（開発時のみ）
socket.onAny((eventName: string, ...args: any[]) => {
  console.log(`📡 受信イベント: ${eventName}`, args);
});
```

### 6. 型定義とインターフェースの一貫性

#### WebRTCメッセージ型の統一
```typescript
// ✅ 統一されたシグナリングメッセージ型
interface SignalingMessage {
  type: 'offer' | 'answer' | 'ice-candidate';
  data: any;
  toUserId: string;    // ← 必須
  fromUserId: string;  // ← 必須
}
```

### 7. エラーハンドリングの改善

#### ユーザーフレンドリーなエラーメッセージ
```typescript
// ✅ 具体的な解決策を含むエラーメッセージ
const handleError = (error: any) => {
  if (error?.error?.code === 'USER_NOT_FOUND') {
    alert(`WebRTC接続エラー: ${error.error.message}\n\n接続相手が見つかりません。ページを再読み込みしてみてください。`);
  } else {
    alert(`エラー (${error?.error?.code || 'UNKNOWN'}): ${error?.error?.message || error.message || 'unknown error'}`);
  }
};
```

### 8. 開発効率向上のためのツール設定

#### 同時起動スクリプト
```json
// package.json (root)
{
  "scripts": {
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm run dev"
  }
}
```

### 9. 将来的な拡張を考慮した設計

#### 型定義の拡張性
- 新しいメッセージタイプの追加を考慮した型設計
- ルーム機能の拡張（最大参加者数変更など）を考慮
- チャット機能の拡張（ファイル送信、絵文字など）を考慮

#### パフォーマンス最適化
- 大人数ルーム対応（P2P → SFU への移行計画）
- メディア品質の動的調整機能
- 接続状態の詳細監視とレポート機能

### 10. 本番環境での考慮事項

#### セキュリティ強化
- TURN サーバーの設定（coturn）
- JWT トークンによる認証
- ルームアクセス制御

#### 運用監視
- Socket.io接続数の監視
- WebRTC接続成功率の測定
- メディア品質の監視